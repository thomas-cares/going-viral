{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IMPORT and standard tweaking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "#visualization option"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# display all columns\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "viral=pd.read_csv(r'data/analysis/viral_charts_songs_2017-2020.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Position</th>\n",
       "      <th>Track Name</th>\n",
       "      <th>Artist</th>\n",
       "      <th>URL</th>\n",
       "      <th>filename</th>\n",
       "      <th>ID</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>group</th>\n",
       "      <th>duration_ms</th>\n",
       "      <th>popularity</th>\n",
       "      <th>acousticness</th>\n",
       "      <th>danceability</th>\n",
       "      <th>energy</th>\n",
       "      <th>key</th>\n",
       "      <th>instrumentalness</th>\n",
       "      <th>liveness</th>\n",
       "      <th>loudness</th>\n",
       "      <th>mode</th>\n",
       "      <th>speechiness</th>\n",
       "      <th>valence</th>\n",
       "      <th>tempo</th>\n",
       "      <th>loud_start</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Sucker</td>\n",
       "      <td>Jonas Brothers</td>\n",
       "      <td>https://open.spotify.com/track/4y3OI86AEP6PQoD...</td>\n",
       "      <td>2019-03-27-in-viral.csv</td>\n",
       "      <td>4y3OI86AEP6PQoDE6olYhO</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>in</td>\n",
       "      <td>viral</td>\n",
       "      <td>181040</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0427</td>\n",
       "      <td>0.842</td>\n",
       "      <td>0.734</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1060</td>\n",
       "      <td>-5.065</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>0.952</td>\n",
       "      <td>137.958</td>\n",
       "      <td>-11.142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Undrunk</td>\n",
       "      <td>FLETCHER</td>\n",
       "      <td>https://open.spotify.com/track/5SHhPFh68OhUmuR...</td>\n",
       "      <td>2019-03-27-in-viral.csv</td>\n",
       "      <td>5SHhPFh68OhUmuRPymKX9d</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>in</td>\n",
       "      <td>viral</td>\n",
       "      <td>183428</td>\n",
       "      <td>0</td>\n",
       "      <td>0.4550</td>\n",
       "      <td>0.679</td>\n",
       "      <td>0.572</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.1270</td>\n",
       "      <td>-6.703</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0781</td>\n",
       "      <td>0.542</td>\n",
       "      <td>92.859</td>\n",
       "      <td>-8.190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Don't Call Me Up</td>\n",
       "      <td>Mabel</td>\n",
       "      <td>https://open.spotify.com/track/5WHTFyqSii0lmT9...</td>\n",
       "      <td>2019-03-27-in-viral.csv</td>\n",
       "      <td>5WHTFyqSii0lmT9R21abT8</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>in</td>\n",
       "      <td>viral</td>\n",
       "      <td>178480</td>\n",
       "      <td>79</td>\n",
       "      <td>0.2960</td>\n",
       "      <td>0.674</td>\n",
       "      <td>0.881</td>\n",
       "      <td>9</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.0793</td>\n",
       "      <td>-2.853</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1470</td>\n",
       "      <td>0.234</td>\n",
       "      <td>98.994</td>\n",
       "      <td>-5.559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Moonlight</td>\n",
       "      <td>Gaullin</td>\n",
       "      <td>https://open.spotify.com/track/0A5gdlrpAuQqZ2i...</td>\n",
       "      <td>2019-03-27-in-viral.csv</td>\n",
       "      <td>0A5gdlrpAuQqZ2iFgnqBFW</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>in</td>\n",
       "      <td>viral</td>\n",
       "      <td>173066</td>\n",
       "      <td>72</td>\n",
       "      <td>0.0529</td>\n",
       "      <td>0.813</td>\n",
       "      <td>0.761</td>\n",
       "      <td>10</td>\n",
       "      <td>0.011900</td>\n",
       "      <td>0.3370</td>\n",
       "      <td>-5.687</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0850</td>\n",
       "      <td>0.290</td>\n",
       "      <td>124.957</td>\n",
       "      <td>-5.704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>i'm so tired...</td>\n",
       "      <td>Lauv</td>\n",
       "      <td>https://open.spotify.com/track/7COXchtUOMd6uIT...</td>\n",
       "      <td>2019-03-27-in-viral.csv</td>\n",
       "      <td>7COXchtUOMd6uIT6HvmRaI</td>\n",
       "      <td>2019-03-27</td>\n",
       "      <td>in</td>\n",
       "      <td>viral</td>\n",
       "      <td>162582</td>\n",
       "      <td>13</td>\n",
       "      <td>0.1760</td>\n",
       "      <td>0.599</td>\n",
       "      <td>0.733</td>\n",
       "      <td>11</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.2420</td>\n",
       "      <td>-7.058</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2030</td>\n",
       "      <td>0.534</td>\n",
       "      <td>102.211</td>\n",
       "      <td>-12.880</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Position        Track Name          Artist  \\\n",
       "0         1            Sucker  Jonas Brothers   \n",
       "1         2           Undrunk        FLETCHER   \n",
       "2         3  Don't Call Me Up           Mabel   \n",
       "3         4         Moonlight         Gaullin   \n",
       "4         5   i'm so tired...            Lauv   \n",
       "\n",
       "                                                 URL                 filename  \\\n",
       "0  https://open.spotify.com/track/4y3OI86AEP6PQoD...  2019-03-27-in-viral.csv   \n",
       "1  https://open.spotify.com/track/5SHhPFh68OhUmuR...  2019-03-27-in-viral.csv   \n",
       "2  https://open.spotify.com/track/5WHTFyqSii0lmT9...  2019-03-27-in-viral.csv   \n",
       "3  https://open.spotify.com/track/0A5gdlrpAuQqZ2i...  2019-03-27-in-viral.csv   \n",
       "4  https://open.spotify.com/track/7COXchtUOMd6uIT...  2019-03-27-in-viral.csv   \n",
       "\n",
       "                       ID        date country  group  duration_ms  popularity  \\\n",
       "0  4y3OI86AEP6PQoDE6olYhO  2019-03-27      in  viral       181040          10   \n",
       "1  5SHhPFh68OhUmuRPymKX9d  2019-03-27      in  viral       183428           0   \n",
       "2  5WHTFyqSii0lmT9R21abT8  2019-03-27      in  viral       178480          79   \n",
       "3  0A5gdlrpAuQqZ2iFgnqBFW  2019-03-27      in  viral       173066          72   \n",
       "4  7COXchtUOMd6uIT6HvmRaI  2019-03-27      in  viral       162582          13   \n",
       "\n",
       "   acousticness  danceability  energy  key  instrumentalness  liveness  \\\n",
       "0        0.0427         0.842   0.734    1          0.000000    0.1060   \n",
       "1        0.4550         0.679   0.572    5          0.000002    0.1270   \n",
       "2        0.2960         0.674   0.881    9          0.000003    0.0793   \n",
       "3        0.0529         0.813   0.761   10          0.011900    0.3370   \n",
       "4        0.1760         0.599   0.733   11          0.000000    0.2420   \n",
       "\n",
       "   loudness  mode  speechiness  valence    tempo  loud_start  \n",
       "0    -5.065     0       0.0588    0.952  137.958     -11.142  \n",
       "1    -6.703     1       0.0781    0.542   92.859      -8.190  \n",
       "2    -2.853     1       0.1470    0.234   98.994      -5.559  \n",
       "3    -5.687     0       0.0850    0.290  124.957      -5.704  \n",
       "4    -7.058     1       0.2030    0.534  102.211     -12.880  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viral.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Position', 'Track Name', 'Artist', 'URL', 'filename', 'ID', 'date',\n",
       "       'country', 'group', 'duration_ms', 'popularity', 'acousticness',\n",
       "       'danceability', 'energy', 'key', 'instrumentalness', 'liveness',\n",
       "       'loudness', 'mode', 'speechiness', 'valence', 'tempo', 'loud_start'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viral.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6007"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(viral.ID.unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "remarks on the features\n",
    "* 'valence' indicates the 'happiness' the lower the score the sader the music. [refercence](https://community.spotify.com/t5/Content-Questions/Valence-as-a-measure-of-happiness/td-p/4385221)\n",
    "* mode 0/1 indicates major/minor (dur/moll) 1=Major / 0=Minor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rename column length to duration to match the kaggle dataframe\n",
    "viral=viral.rename(columns={'length':'duration_ms'})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### dtypes tweaking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Position              int64\n",
       "Track Name           object\n",
       "Artist               object\n",
       "URL                  object\n",
       "filename             object\n",
       "ID                   object\n",
       "date                 object\n",
       "country              object\n",
       "group                object\n",
       "duration_ms           int64\n",
       "popularity            int64\n",
       "acousticness        float64\n",
       "danceability        float64\n",
       "energy              float64\n",
       "key                   int64\n",
       "instrumentalness    float64\n",
       "liveness            float64\n",
       "loudness            float64\n",
       "mode                  int64\n",
       "speechiness         float64\n",
       "valence             float64\n",
       "tempo               float64\n",
       "loud_start          float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viral.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#date to datetime\n",
    "viral.date=pd.to_datetime(viral.date, format=\"%Y-%m-%d\", yearfirst=True)\n",
    "\n",
    "# mode and key are categroical values\n",
    "\n",
    "#make mode categorical and name 'Major', 'Minor'\n",
    "viral['mode'] = np.where(viral['mode'].apply(str)=='1','Major','Minor')\n",
    "\n",
    "#make key categorical and label it more readable\n",
    "viral['key'] = 'key_'+viral['key'].apply(str)\n",
    "\n",
    "#introduce numeric column if viral or not 0/1\n",
    "viral['viral']=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mapping country codes to real country names\n",
    "keys=list(sorted(set(viral.country)))\n",
    "values=['Argentina','Australia','Brazil','Canada','Germany','Egypt','Spain','United Kingdom','Indonesia','India','Iceland','Italy','Japan','Marocco','Mexico','New Zealand','Russia','Turkey','Ukraine','South Africa']\n",
    "country_dict = dict(zip(keys, values))\n",
    "viral['country']=viral['country'].map(country_dict) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CAN WE PREDICT IF SONGS ARE VIRAL SONGS\n",
    "* Supervised learning model with K NEAREST NEIGHBORS\n",
    "* Will the musical features of snongs labeled as viral be distinguishable enough?\n",
    "* Using a large kaggle song data base as baseline to compare against songs from viral charts\n",
    "* https://www.kaggle.com/yamaerenay/spotify-dataset-19212020-160k-tracks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Set Up Spotify dataset from Kaggle as baseline to compare against"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "kaggle=pd.read_csv(r'data/kaggle/data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#adding column indicating they are not the viral songs\n",
    "kaggle['group']='base'\n",
    "\n",
    "kaggle['viral']=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mode and key are categroical values\n",
    "\n",
    "#make mode categorical and name 'Major', 'Minor'\n",
    "kaggle['mode'] = np.where(kaggle['mode'].apply(str)=='1','Major','Minor')\n",
    "\n",
    "#make key categorical and label it more readable\n",
    "kaggle['key'] = 'key_'+kaggle['key'].apply(str)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### subsetting for years 2015-2020"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of records:  20234\n"
     ]
    }
   ],
   "source": [
    "# only want to keep songs from 2015 to 2020 to avoid accidentally measuring change in music production\n",
    "base=kaggle[kaggle['year'].isin([2014,2015,2016,2017,2018,2019,2020,2021])].reset_index(drop=True)\n",
    "print('# of records: ',len(base))\n",
    "#sadly reissues of old songs cannot be filterd out (ex. Frank Sinatra and Joni Mitchel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SET UP FOR MODELLING\n",
    "* create joint dataframe for analysis\n",
    "* check multicollinearity\n",
    "* check outliers\n",
    "* create dummies for categorical variable (ex key & mode)\n",
    "* standardize continuous variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### create joint dataframe \n",
    "create joint df of viral charts songs and songs from kaggle DB I want to compare against"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# list of relevant columns\n",
    "continuous_feat=[\n",
    "            \"acousticness\",\n",
    "            \"danceability\",\n",
    "            \"duration_ms\",\n",
    "            \"energy\",\n",
    "            \"instrumentalness\",\n",
    "            \"liveness\",\n",
    "            \"loudness\",\n",
    "            \"speechiness\",\n",
    "            \"tempo\",\n",
    "            \"valence\"]\n",
    "\n",
    "categorical_feat=[\"key\",\"mode\"]\n",
    "\n",
    "target_feat=['viral']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DATA FRAME ORIGINAL VALUES\n",
    "\n",
    "#### joint dataframe with true values \n",
    "named: analysis_true"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#concat viral DF with DF from kaggle that i use as base\n",
    "analysis_true=pd.concat([viral[target_feat+categorical_feat+continuous_feat],\n",
    "                        base[target_feat+categorical_feat+continuous_feat]\n",
    "                        ],\n",
    "                       axis=0,\n",
    "                        ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>viral</th>\n",
       "      <th>key</th>\n",
       "      <th>mode</th>\n",
       "      <th>acousticness</th>\n",
       "      <th>danceability</th>\n",
       "      <th>duration_ms</th>\n",
       "      <th>energy</th>\n",
       "      <th>instrumentalness</th>\n",
       "      <th>liveness</th>\n",
       "      <th>loudness</th>\n",
       "      <th>speechiness</th>\n",
       "      <th>tempo</th>\n",
       "      <th>valence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>key_1</td>\n",
       "      <td>Minor</td>\n",
       "      <td>0.04270</td>\n",
       "      <td>0.842</td>\n",
       "      <td>181040</td>\n",
       "      <td>0.734</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1060</td>\n",
       "      <td>-5.065</td>\n",
       "      <td>0.0588</td>\n",
       "      <td>137.958</td>\n",
       "      <td>0.952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>key_5</td>\n",
       "      <td>Major</td>\n",
       "      <td>0.45500</td>\n",
       "      <td>0.679</td>\n",
       "      <td>183428</td>\n",
       "      <td>0.572</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.1270</td>\n",
       "      <td>-6.703</td>\n",
       "      <td>0.0781</td>\n",
       "      <td>92.859</td>\n",
       "      <td>0.542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>key_9</td>\n",
       "      <td>Major</td>\n",
       "      <td>0.29600</td>\n",
       "      <td>0.674</td>\n",
       "      <td>178480</td>\n",
       "      <td>0.881</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.0793</td>\n",
       "      <td>-2.853</td>\n",
       "      <td>0.1470</td>\n",
       "      <td>98.994</td>\n",
       "      <td>0.234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>key_10</td>\n",
       "      <td>Minor</td>\n",
       "      <td>0.05290</td>\n",
       "      <td>0.813</td>\n",
       "      <td>173066</td>\n",
       "      <td>0.761</td>\n",
       "      <td>0.011900</td>\n",
       "      <td>0.3370</td>\n",
       "      <td>-5.687</td>\n",
       "      <td>0.0850</td>\n",
       "      <td>124.957</td>\n",
       "      <td>0.290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>key_11</td>\n",
       "      <td>Major</td>\n",
       "      <td>0.17600</td>\n",
       "      <td>0.599</td>\n",
       "      <td>162582</td>\n",
       "      <td>0.733</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.2420</td>\n",
       "      <td>-7.058</td>\n",
       "      <td>0.2030</td>\n",
       "      <td>102.211</td>\n",
       "      <td>0.534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33928</th>\n",
       "      <td>0</td>\n",
       "      <td>key_6</td>\n",
       "      <td>Minor</td>\n",
       "      <td>0.00917</td>\n",
       "      <td>0.792</td>\n",
       "      <td>147615</td>\n",
       "      <td>0.866</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>0.1780</td>\n",
       "      <td>-5.089</td>\n",
       "      <td>0.0356</td>\n",
       "      <td>125.972</td>\n",
       "      <td>0.186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33929</th>\n",
       "      <td>0</td>\n",
       "      <td>key_4</td>\n",
       "      <td>Major</td>\n",
       "      <td>0.79500</td>\n",
       "      <td>0.429</td>\n",
       "      <td>144720</td>\n",
       "      <td>0.211</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1960</td>\n",
       "      <td>-11.665</td>\n",
       "      <td>0.0360</td>\n",
       "      <td>94.710</td>\n",
       "      <td>0.228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33930</th>\n",
       "      <td>0</td>\n",
       "      <td>key_4</td>\n",
       "      <td>Minor</td>\n",
       "      <td>0.80600</td>\n",
       "      <td>0.671</td>\n",
       "      <td>218147</td>\n",
       "      <td>0.589</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>0.1130</td>\n",
       "      <td>-12.393</td>\n",
       "      <td>0.0282</td>\n",
       "      <td>108.058</td>\n",
       "      <td>0.714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33931</th>\n",
       "      <td>0</td>\n",
       "      <td>key_0</td>\n",
       "      <td>Major</td>\n",
       "      <td>0.92000</td>\n",
       "      <td>0.462</td>\n",
       "      <td>244000</td>\n",
       "      <td>0.240</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1130</td>\n",
       "      <td>-12.077</td>\n",
       "      <td>0.0377</td>\n",
       "      <td>171.319</td>\n",
       "      <td>0.320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33932</th>\n",
       "      <td>0</td>\n",
       "      <td>key_7</td>\n",
       "      <td>Major</td>\n",
       "      <td>0.23900</td>\n",
       "      <td>0.677</td>\n",
       "      <td>197710</td>\n",
       "      <td>0.460</td>\n",
       "      <td>0.891000</td>\n",
       "      <td>0.2150</td>\n",
       "      <td>-12.237</td>\n",
       "      <td>0.0258</td>\n",
       "      <td>112.208</td>\n",
       "      <td>0.747</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33933 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       viral     key   mode  acousticness  danceability  duration_ms  energy  \\\n",
       "0          1   key_1  Minor       0.04270         0.842       181040   0.734   \n",
       "1          1   key_5  Major       0.45500         0.679       183428   0.572   \n",
       "2          1   key_9  Major       0.29600         0.674       178480   0.881   \n",
       "3          1  key_10  Minor       0.05290         0.813       173066   0.761   \n",
       "4          1  key_11  Major       0.17600         0.599       162582   0.733   \n",
       "...      ...     ...    ...           ...           ...          ...     ...   \n",
       "33928      0   key_6  Minor       0.00917         0.792       147615   0.866   \n",
       "33929      0   key_4  Major       0.79500         0.429       144720   0.211   \n",
       "33930      0   key_4  Minor       0.80600         0.671       218147   0.589   \n",
       "33931      0   key_0  Major       0.92000         0.462       244000   0.240   \n",
       "33932      0   key_7  Major       0.23900         0.677       197710   0.460   \n",
       "\n",
       "       instrumentalness  liveness  loudness  speechiness    tempo  valence  \n",
       "0              0.000000    0.1060    -5.065       0.0588  137.958    0.952  \n",
       "1              0.000002    0.1270    -6.703       0.0781   92.859    0.542  \n",
       "2              0.000003    0.0793    -2.853       0.1470   98.994    0.234  \n",
       "3              0.011900    0.3370    -5.687       0.0850  124.957    0.290  \n",
       "4              0.000000    0.2420    -7.058       0.2030  102.211    0.534  \n",
       "...                 ...       ...       ...          ...      ...      ...  \n",
       "33928          0.000060    0.1780    -5.089       0.0356  125.972    0.186  \n",
       "33929          0.000000    0.1960   -11.665       0.0360   94.710    0.228  \n",
       "33930          0.920000    0.1130   -12.393       0.0282  108.058    0.714  \n",
       "33931          0.000000    0.1130   -12.077       0.0377  171.319    0.320  \n",
       "33932          0.891000    0.2150   -12.237       0.0258  112.208    0.747  \n",
       "\n",
       "[33933 rows x 13 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analysis_true"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DATA FRAME: SCALED AND STANDARDIZED\n",
    "#### joint dataframe with standardized continuous variables\n",
    "named: analysis_stan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit without transform for later use when applying to new data \n",
    "scaler = StandardScaler().fit(analysis_true[continuous_feat])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "analysis_stan=analysis_true"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#standardize the contnuous feature only\n",
    "analysis_stan[continuous_feat]=pd.DataFrame(StandardScaler(copy=False).fit_transform(analysis_true[continuous_feat]),columns=continuous_feat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'from sklearn.preprocessing import StandardScaler\\n\\n#standardize continious features of viral DF\\nviral_continuous_feat_stand=pd.DataFrame(StandardScaler().fit_transform(viral[continuous_feat]),columns=continuous_feat)\\n\\n#standardize continious features of base DF (from kaggle)\\nbase_continuous_feat_stand=pd.DataFrame(StandardScaler().fit_transform(base[continuous_feat]),columns=continuous_feat)'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "#standardize continious features of viral DF\n",
    "viral_continuous_feat_stand=pd.DataFrame(StandardScaler().fit_transform(viral[continuous_feat]),columns=continuous_feat)\n",
    "\n",
    "#standardize continious features of base DF (from kaggle)\n",
    "base_continuous_feat_stand=pd.DataFrame(StandardScaler().fit_transform(base[continuous_feat]),columns=continuous_feat)'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'#viral df now with standardized continuouse features\\nviral_stan=pd.concat([viral[target_feat+categorical_feat],\\n                        viral_continuous_feat_stand\\n                        ],\\n                       axis=1,\\n                        ignore_index=True)\\nviral_stan.columns=target_feat+categorical_feat+continuous_feat\\n\\n#base df now with standardized continuouse features\\nbase_stan=pd.concat([base[target_feat+categorical_feat],\\n                        base_continuous_feat_stand\\n                        ],\\n                       axis=1,\\n                        ignore_index=True)\\nbase_stan.columns=target_feat+categorical_feat+continuous_feat\\n'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''#viral df now with standardized continuouse features\n",
    "viral_stan=pd.concat([viral[target_feat+categorical_feat],\n",
    "                        viral_continuous_feat_stand\n",
    "                        ],\n",
    "                       axis=1,\n",
    "                        ignore_index=True)\n",
    "viral_stan.columns=target_feat+categorical_feat+continuous_feat\n",
    "\n",
    "#base df now with standardized continuouse features\n",
    "base_stan=pd.concat([base[target_feat+categorical_feat],\n",
    "                        base_continuous_feat_stand\n",
    "                        ],\n",
    "                       axis=1,\n",
    "                        ignore_index=True)\n",
    "base_stan.columns=target_feat+categorical_feat+continuous_feat\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'#concat viral DF w/standardized features to base DF w/standardized features\\nanalysis_stan=pd.concat([viral_stan,\\n                        base_stan], \\n                        axis=0,\\n                        ignore_index=True\\n                       )'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''#concat viral DF w/standardized features to base DF w/standardized features\n",
    "analysis_stan=pd.concat([viral_stan,\n",
    "                        base_stan], \n",
    "                        axis=0,\n",
    "                        ignore_index=True\n",
    "                       )'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### checking multicollinearity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\n",
    "corr = round(analysis_stan.corr(),3)\n",
    "f, ax = plt.subplots(figsize=(10, 10))\n",
    "sns.set_style(\"darkgrid\")\n",
    "mask = np.triu(np.ones_like(corr, dtype=bool)) # removing the other side of the heatmap\n",
    "cmap = sns.diverging_palette(230, 20, as_cmap=True) #preparing cmap\n",
    "sns.heatmap(corr,mask=mask,cmap=cmap,linewidths=.5,square=True,annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create dummies of categorical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "#picking only the categroical vairbles : key and mode\n",
    "cat = analysis_stan[categorical_feat]\n",
    "enc = OneHotEncoder()\n",
    "cat_encoded = pd.DataFrame(enc.fit_transform(cat).toarray(), columns = enc.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Setting up X and y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>acousticness</th>\n",
       "      <th>danceability</th>\n",
       "      <th>duration_ms</th>\n",
       "      <th>energy</th>\n",
       "      <th>instrumentalness</th>\n",
       "      <th>liveness</th>\n",
       "      <th>loudness</th>\n",
       "      <th>speechiness</th>\n",
       "      <th>tempo</th>\n",
       "      <th>valence</th>\n",
       "      <th>x0_key_0</th>\n",
       "      <th>x0_key_1</th>\n",
       "      <th>x0_key_10</th>\n",
       "      <th>x0_key_11</th>\n",
       "      <th>x0_key_2</th>\n",
       "      <th>x0_key_3</th>\n",
       "      <th>x0_key_4</th>\n",
       "      <th>x0_key_5</th>\n",
       "      <th>x0_key_6</th>\n",
       "      <th>x0_key_7</th>\n",
       "      <th>x0_key_8</th>\n",
       "      <th>x0_key_9</th>\n",
       "      <th>x1_Major</th>\n",
       "      <th>x1_Minor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.729603</td>\n",
       "      <td>1.193705</td>\n",
       "      <td>-0.253564</td>\n",
       "      <td>0.426470</td>\n",
       "      <td>-0.505215</td>\n",
       "      <td>-0.549543</td>\n",
       "      <td>0.653589</td>\n",
       "      <td>-0.443116</td>\n",
       "      <td>0.568695</td>\n",
       "      <td>1.961139</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.697026</td>\n",
       "      <td>0.244674</td>\n",
       "      <td>-0.239483</td>\n",
       "      <td>-0.307458</td>\n",
       "      <td>-0.505207</td>\n",
       "      <td>-0.429113</td>\n",
       "      <td>0.253990</td>\n",
       "      <td>-0.278012</td>\n",
       "      <td>-1.059601</td>\n",
       "      <td>0.276622</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.146859</td>\n",
       "      <td>0.215563</td>\n",
       "      <td>-0.268660</td>\n",
       "      <td>1.092440</td>\n",
       "      <td>-0.505205</td>\n",
       "      <td>-0.702662</td>\n",
       "      <td>1.193220</td>\n",
       "      <td>0.311402</td>\n",
       "      <td>-0.838097</td>\n",
       "      <td>-0.988820</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.694309</td>\n",
       "      <td>1.024859</td>\n",
       "      <td>-0.300585</td>\n",
       "      <td>0.548791</td>\n",
       "      <td>-0.467577</td>\n",
       "      <td>0.775193</td>\n",
       "      <td>0.501849</td>\n",
       "      <td>-0.218985</td>\n",
       "      <td>0.099295</td>\n",
       "      <td>-0.758740</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.268362</td>\n",
       "      <td>-0.221108</td>\n",
       "      <td>-0.362406</td>\n",
       "      <td>0.421939</td>\n",
       "      <td>-0.505215</td>\n",
       "      <td>0.230388</td>\n",
       "      <td>0.167385</td>\n",
       "      <td>0.790462</td>\n",
       "      <td>-0.721948</td>\n",
       "      <td>0.243753</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   acousticness  danceability  duration_ms    energy  instrumentalness  \\\n",
       "0     -0.729603      1.193705    -0.253564  0.426470         -0.505215   \n",
       "1      0.697026      0.244674    -0.239483 -0.307458         -0.505207   \n",
       "2      0.146859      0.215563    -0.268660  1.092440         -0.505205   \n",
       "3     -0.694309      1.024859    -0.300585  0.548791         -0.467577   \n",
       "4     -0.268362     -0.221108    -0.362406  0.421939         -0.505215   \n",
       "\n",
       "   liveness  loudness  speechiness     tempo   valence  x0_key_0  x0_key_1  \\\n",
       "0 -0.549543  0.653589    -0.443116  0.568695  1.961139       0.0       1.0   \n",
       "1 -0.429113  0.253990    -0.278012 -1.059601  0.276622       0.0       0.0   \n",
       "2 -0.702662  1.193220     0.311402 -0.838097 -0.988820       0.0       0.0   \n",
       "3  0.775193  0.501849    -0.218985  0.099295 -0.758740       0.0       0.0   \n",
       "4  0.230388  0.167385     0.790462 -0.721948  0.243753       0.0       0.0   \n",
       "\n",
       "   x0_key_10  x0_key_11  x0_key_2  x0_key_3  x0_key_4  x0_key_5  x0_key_6  \\\n",
       "0        0.0        0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "1        0.0        0.0       0.0       0.0       0.0       1.0       0.0   \n",
       "2        0.0        0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "3        1.0        0.0       0.0       0.0       0.0       0.0       0.0   \n",
       "4        0.0        1.0       0.0       0.0       0.0       0.0       0.0   \n",
       "\n",
       "   x0_key_7  x0_key_8  x0_key_9  x1_Major  x1_Minor  \n",
       "0       0.0       0.0       0.0       0.0       1.0  \n",
       "1       0.0       0.0       0.0       1.0       0.0  \n",
       "2       0.0       0.0       1.0       1.0       0.0  \n",
       "3       0.0       0.0       0.0       0.0       1.0  \n",
       "4       0.0       0.0       0.0       1.0       0.0  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = pd.concat((analysis_stan[continuous_feat], cat_encoded), axis=1)\n",
    "y=analysis_stan['viral']\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Split test and train\n",
    "decided for 0.15 train sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K NEAREST NEIGHBOUR\n",
    "* distance based algorithms demand that all variables need to be standardized\n",
    "* they all need to be on the same scale "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### model and predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "knear_model = KNeighborsClassifier(n_neighbors=3).fit(X_train, y_train)\n",
    "knear_pred = knear_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate k nearest neighbour w/ score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6993778650949575\n",
      "0    17714\n",
      "1    12826\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(knear_model.score(X_test, y_test))\n",
    "print(pd.Series(knear_pred).value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate k nearest neighbours w/ precision, recall and f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_f1b16f2e_6a5d_11eb_bf85_acbc329d413drow0_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 62.3%, transparent 62.3%);\n",
       "        }#T_f1b16f2e_6a5d_11eb_bf85_acbc329d413drow0_col1{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 64.8%, transparent 64.8%);\n",
       "        }#T_f1b16f2e_6a5d_11eb_bf85_acbc329d413drow0_col2{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 63.5%, transparent 63.5%);\n",
       "        }</style><table id=\"T_f1b16f2e_6a5d_11eb_bf85_acbc329d413d\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Precision</th>        <th class=\"col_heading level0 col1\" >Recall</th>        <th class=\"col_heading level0 col2\" >F1-Score</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_f1b16f2e_6a5d_11eb_bf85_acbc329d413dlevel0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_f1b16f2e_6a5d_11eb_bf85_acbc329d413drow0_col0\" class=\"data row0 col0\" >0.623109</td>\n",
       "                        <td id=\"T_f1b16f2e_6a5d_11eb_bf85_acbc329d413drow0_col1\" class=\"data row0 col1\" >0.647702</td>\n",
       "                        <td id=\"T_f1b16f2e_6a5d_11eb_bf85_acbc329d413drow0_col2\" class=\"data row0 col2\" >0.635168</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x11de4bc40>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#evaluate k nearest neighbour: eval_knear\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "\n",
    "eval_knear={'Precision': precision_score(y_test, knear_pred, pos_label=1),#knear_pred predicitons of k nearest neighbour\n",
    "            'Recall': recall_score(y_test, knear_pred, pos_label=1),\n",
    "            'F1-Score': f1_score(y_test, knear_pred, pos_label=1)}\n",
    "\n",
    "pd.DataFrame(eval_knear,index=[0]).style.bar(color='lightblue', vmin=0.0, vmax=1.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate k nearest neighbours w/ Confusion Matrix and heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13367  4834]\n",
      " [ 4347  7992]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cf_matrix = confusion_matrix(y_test, knear_pred)#knear_pred predicitons of k nearest neighbour\n",
    "print(cf_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "cmap = sns.diverging_palette(230, 20, as_cmap=True) #preparing cmap\n",
    "sns.set(font_scale=1.2)\n",
    "sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True, \n",
    "            fmt='.2%', cmap=cmap,xticklabels=[ 'predicted random song', 'predicted viral song'],\n",
    "            yticklabels=['actually a random song','actually a viral song']).set_title('K NEAREST NEIGHBOUR: CONFUSION MATRIX')\n",
    "plt.yticks(rotation = 0)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DECISION TREE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt_model = DecisionTreeClassifier().fit(X_train, y_train)\n",
    "dt_pred = dt_model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7116895874263262"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_f204aa5e_6a5d_11eb_bf85_acbc329d413drow0_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 63.7%, transparent 63.7%);\n",
       "        }#T_f204aa5e_6a5d_11eb_bf85_acbc329d413drow0_col1{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 66.7%, transparent 66.7%);\n",
       "        }#T_f204aa5e_6a5d_11eb_bf85_acbc329d413drow0_col2{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 65.1%, transparent 65.1%);\n",
       "        }</style><table id=\"T_f204aa5e_6a5d_11eb_bf85_acbc329d413d\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Precision</th>        <th class=\"col_heading level0 col1\" >Recall</th>        <th class=\"col_heading level0 col2\" >F1-Score</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_f204aa5e_6a5d_11eb_bf85_acbc329d413dlevel0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_f204aa5e_6a5d_11eb_bf85_acbc329d413drow0_col0\" class=\"data row0 col0\" >0.636807</td>\n",
       "                        <td id=\"T_f204aa5e_6a5d_11eb_bf85_acbc329d413drow0_col1\" class=\"data row0 col1\" >0.666586</td>\n",
       "                        <td id=\"T_f204aa5e_6a5d_11eb_bf85_acbc329d413drow0_col2\" class=\"data row0 col2\" >0.651356</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x11f999ca0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#evaluate decision tree : eval_dt\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "eval_dt={'Precision': precision_score(y_test, dt_pred, pos_label=1),\n",
    "            'Recall': recall_score(y_test, dt_pred, pos_label=1),\n",
    "            'F1-Score': f1_score(y_test, dt_pred, pos_label=1)}\n",
    "\n",
    "pd.DataFrame(eval_dt,index=[0]).style.bar(color='lightblue', vmin=0.0, vmax=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix: \n",
      " [[13510  4691]\n",
      " [ 4114  8225]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cf_matrix = confusion_matrix(y_test, dt_pred) #dt_pred : predictions decision tree\n",
    "print('confusion matrix: \\n',cf_matrix)\n",
    "f, ax = plt.subplots(figsize=(15, 10))\n",
    "cmap = sns.diverging_palette(230, 20, as_cmap=True) #preparing cmap\n",
    "\n",
    "akws = {'ha': 'left','va': 'top'}\n",
    "\n",
    "ax=sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True, annot_kws=akws,\n",
    "            fmt='.2%', cmap=cmap,xticklabels=[ 'predicted random song', 'predicted viral song'],\n",
    "            yticklabels=['actually a random song','actually a viral song'])\n",
    "plt.yticks(rotation = 0)\n",
    "plt.title('DECISION TREE: CONFUSION MATRIX', size=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* smells like overfitting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature importance\n",
    "in decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# feature importance embedded in y axis\n",
    "f, ax = plt.subplots(figsize=(25, 8))\n",
    "ax = sns.barplot(x=X.columns, \n",
    "                 y=dt_model.feature_importances_).set_xticklabels(ax.get_xticklabels(), \n",
    "                          rotation=45, \n",
    "                          horizontalalignment='right', size = 15)\n",
    "plt.title('Feature Importance', size=20)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_f29603a0_6a5d_11eb_bf85_acbc329d413drow0_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 15.4%, transparent 15.4%);\n",
       "        }#T_f29603a0_6a5d_11eb_bf85_acbc329d413drow1_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 13.9%, transparent 13.9%);\n",
       "        }#T_f29603a0_6a5d_11eb_bf85_acbc329d413drow2_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 10.0%, transparent 10.0%);\n",
       "        }#T_f29603a0_6a5d_11eb_bf85_acbc329d413drow3_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 9.2%, transparent 9.2%);\n",
       "        }#T_f29603a0_6a5d_11eb_bf85_acbc329d413drow4_col0{\n",
       "            width:  10em;\n",
       "             height:  80%;\n",
       "            background:  linear-gradient(90deg,lightblue 8.2%, transparent 8.2%);\n",
       "        }</style><table id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413d\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413dlevel0_row0\" class=\"row_heading level0 row0\" >instrumentalness</th>\n",
       "                        <td id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413drow0_col0\" class=\"data row0 col0\" >0.154350</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413dlevel0_row1\" class=\"row_heading level0 row1\" >danceability</th>\n",
       "                        <td id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413drow1_col0\" class=\"data row1 col0\" >0.138558</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413dlevel0_row2\" class=\"row_heading level0 row2\" >duration_ms</th>\n",
       "                        <td id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413drow2_col0\" class=\"data row2 col0\" >0.099504</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413dlevel0_row3\" class=\"row_heading level0 row3\" >tempo</th>\n",
       "                        <td id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413drow3_col0\" class=\"data row3 col0\" >0.091650</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413dlevel0_row4\" class=\"row_heading level0 row4\" >loudness</th>\n",
       "                        <td id=\"T_f29603a0_6a5d_11eb_bf85_acbc329d413drow4_col0\" class=\"data row4 col0\" >0.081516</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x123d19b20>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(dict(zip(X.columns, dt_model.feature_importances_)),index=[0]).T.rename(columns={0:'importance'}).sort_values(by='importance',ascending=False).head().style.bar(color='lightblue', vmin=0.0, vmax=1.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  RADAR PLOT\n",
    "### FEATURE MEANS OF VIRAL SONGS VERSUS DER FEATURE MEANS OF KAGGLE SONGS\n",
    "reference: https://www.kaggle.com/typewind/draw-a-radar-chart-with-python-in-a-simple-way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'viral_stan' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-e0e6487f9bd3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mviral_stan\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcontinuous_feat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mviral_songs_stats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mviral_stan\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcontinuous_feat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m###\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mbase_songs_stats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbase_stan\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcontinuous_feat\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'viral_stan' is not defined"
     ]
    }
   ],
   "source": [
    "labels=np.array(viral_stan[continuous_feat].columns)\n",
    "viral_songs_stats=viral_stan[continuous_feat].median().values\n",
    "\n",
    "###\n",
    "base_songs_stats=base_stan[continuous_feat].median().values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "angles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n",
    "angles=np.concatenate((angles,[angles[0]]))\n",
    "###\n",
    "viral_songs_stats=np.concatenate((viral_songs_stats,[viral_songs_stats[0]]))\n",
    "base_songs_stats=np.concatenate((base_songs_stats,[base_songs_stats[0]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig=plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, polar=True)\n",
    "plot1=ax.plot(angles, base_songs_stats, '.', linewidth=2, label='base songs',color='blue')\n",
    "plot2=ax.plot(angles, viral_songs_stats, '.', linewidth=2, label='viral songs',color='red')\n",
    "ax.fill(angles, base_songs_stats, alpha=0.25, color='blue')\n",
    "ax.fill(angles, viral_songs_stats, alpha=0.25, color='red')\n",
    "ax.set_thetagrids((angles * 180/np.pi)[0:10], labels)\n",
    "plt.legend(title='Legend', loc='upper left')\n",
    "ax.set_title('AVERAGE\\nVIRAL SONGS vs BASELINE SONGS\\n\\n',size=20)\n",
    "ax.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RUN PREDICTOR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import spotipy\n",
    "import spotipy.util as util\n",
    "from spotipy.oauth2 import SpotifyClientCredentials\n",
    "from spotipy.oauth2 import SpotifyOAuth\n",
    "import spotipy.oauth2 as oauth2\n",
    "import os\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_client_id=os.getenv('spoti_CLIENT_ID')\n",
    "my_client_secret=os.getenv('spoti_CLIENT_SECRET')\n",
    "token = SpotifyClientCredentials(client_id=my_client_id, client_secret=my_client_secret)\n",
    "#token to pull publicly available data like music analysis data\n",
    "cache_token = token.get_access_token()\n",
    "sp = spotipy.Spotify(cache_token)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict_hit(url,continuous_feat,categorical_feat):\n",
    "    \n",
    "    song_id=re.findall(r'\\d\\w+',str(url))[0]\n",
    "    \n",
    "    #set up to call spotify API\n",
    "    meta_feat=['ID','Track_Name','Artist']\n",
    "\n",
    "    meta = sp.track(song_id)\n",
    "    features = sp.audio_features(song_id)\n",
    "    analysis= sp.audio_analysis(song_id)\n",
    "\n",
    "    \n",
    "    #meta\n",
    "    ID=song_id\n",
    "    Track_Name= sp.track(ID)['name']\n",
    "    artist=sp.track(ID)['artists'][0]['name']\n",
    "     \n",
    "    #continous features\n",
    "    acousticness = features[0]['acousticness']\n",
    "    danceability = features[0]['danceability']\n",
    "    duration_ms = meta['duration_ms']\n",
    "    energy = features[0]['energy']\n",
    "    instrumentalness = features[0]['instrumentalness']\n",
    "    liveness = features[0]['liveness']\n",
    "    loudness = features[0]['loudness']\n",
    "    speechiness = features[0]['speechiness']\n",
    "    tempo = features[0]['tempo']\n",
    "    valence=features[0]['valence']\n",
    "\n",
    "    #categorical_feat\n",
    "    key = features[0]['key']\n",
    "    mode = features[0]['mode']\n",
    "\n",
    "    \n",
    "    #create dictionary\n",
    "    keys=[i for i in meta_feat+continuous_feat+categorical_feat] #these lists should contain the nemes of all features I need\n",
    "    values=[ID,Track_Name,artist,acousticness,danceability,duration_ms,energy,instrumentalness,liveness,loudness,\n",
    "           speechiness,tempo,valence,key,mode] # this should loop throug ha list of all value names\n",
    "    \n",
    "    df=pd.DataFrame(dict(zip(keys,values)),index=[0])\n",
    "    \n",
    "    #standardize \n",
    "    \n",
    "    return df\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Paste URL of Spotify Song\\nShould look like this: https://open.spotify.com/track/7qzftATxwdp8G78aMmizXN')\n",
    "url=input().strip(' ')\n",
    "print(predict_hit(url,continuous_feat,categorical_feat))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_feat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sp.track('7qzftATxwdp8G78aMmizXN')['artists'][0]['name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ID=re.findall(r'\\d\\w+',str(url))[0]\n",
    "ID"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOTES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PLOTS\n",
    "https://seaborn.pydata.org/tutorial/distributions.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
